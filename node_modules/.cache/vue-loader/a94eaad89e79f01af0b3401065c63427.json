{"remainingRequest":"/Users/nyg/Work/NayDev/KST_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nyg/Work/NayDev/KST_web/src/components/Alumnos/RegistroDeAlumnos.vue?vue&type=template&id=e8639d0a&scoped=true&","dependencies":[{"path":"/Users/nyg/Work/NayDev/KST_web/src/components/Alumnos/RegistroDeAlumnos.vue","mtime":1658172758838},{"path":"/Users/nyg/Work/NayDev/KST_web/node_modules/cache-loader/dist/cjs.js","mtime":1657481261281},{"path":"/Users/nyg/Work/NayDev/KST_web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1657481276207},{"path":"/Users/nyg/Work/NayDev/KST_web/node_modules/cache-loader/dist/cjs.js","mtime":1657481261281},{"path":"/Users/nyg/Work/NayDev/KST_web/node_modules/vue-loader/lib/index.js","mtime":1657481273148}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}